Module TestPolymorphic
{
	//=========================================================
	
	Polymorphic SimpleBase
	{
		ShortString Name;
		Integer Days;
	}
	
	Entity Simple1
	{
		Decimal Days; // Should automatically match Days implementation by name.
		Is TestPolymorphic.SimpleBase; // Should automatically add Name property.
	}
	
	Entity Simple2
	{
		ShortString Name1;
		Integer Name2;
		DateTime Finish;
		
		Is TestPolymorphic.SimpleBase
		{
			Implements TestPolymorphic.SimpleBase.Name "Name1 + '-' + CONVERT(NVARCHAR(256), Name2)";
			Implements TestPolymorphic.SimpleBase.Days "DATEDIFF(d, '1999-12-31', Finish)";
		}
	}
	
	Browse SimpleBrowse TestPolymorphic.SimpleBase
	{
		Take Name;
		Take Days;
		Take Subtype;
		Take 'Simple1.ID';
		Take 'Simple1.Name';
		Take Simple2;
		Take 'Simple2.Name1';
	}
	
	//=========================================================
	
	Polymorphic Empty
	{
		// Empty. No subtypes.
	}
	
	//=========================================================
	
	Polymorphic SecondBase
	{
		LongString Info;
	}
	
	Is Simple1 TestPolymorphic.SecondBase
	{
		Implements TestPolymorphic.SecondBase.Info "CONVERT(NVARCHAR(MAX), Name) +  '/' + CONVERT(NVARCHAR(MAX), Days)";
	}
	
	Is Simple2 TestPolymorphic.SecondBase
	{
		Implements TestPolymorphic.SecondBase.Info "CONVERT(NVARCHAR(MAX), Name1) +  '/' + CONVERT(NVARCHAR(MAX), Name2) +  '/' + CONVERT(NVARCHAR(MAX), Finish, 126)";
	}
	
	Is Second1 TestPolymorphic.SecondBase
	{
		Implements TestPolymorphic.SecondBase.Info "Info";
	}

	Entity Second1
	{
		LongString Info;
	}
	
	//=========================================================
	
	Entity Dependant
	{
		ShortString Name;
		Reference SimpleBase;
	}
	
	Browse DependantBrowse TestPolymorphic.Dependant
	{
		Take Name;
		Take 'SimpleBase.Name';
	}
	
	//=========================================================
	
	Entity Disjunctive1
	{
		ShortString Name;
	}
	
	Entity Disjunctive2
	{
		Integer Days;
	}
	
	Polymorphic Disjunctive; // No common properties.
	Entity Disjunctive1 { Is TestPolymorphic.Disjunctive; }
	Entity Disjunctive2 { Is TestPolymorphic.Disjunctive; }

	Browse DisjunctiveBrowse TestPolymorphic.Disjunctive
	{
		Take Subtype;
		Take Disjunctive1;
		Take 'Disjunctive2.ID';
		Take 'Disjunctive2.Days';
	}
	
	//=========================================================
	
	Polymorphic Base1
	{
		ShortString Name1;
		Materialized;
	}
	
	Polymorphic Base2
	{
		ShortString Name2;
	}
	
	Polymorphic Base3
	{
		ShortString Name1;
	}
	
	Entity MultipleImplementations
	{
		Is TestPolymorphic.Base1;
		Is TestPolymorphic.Base1 'Reverse'
		{
			Implements TestPolymorphic.Base1.Name1 "REVERSE(Name1)";
		}
		Is TestPolymorphic.Base2;
		Is TestPolymorphic.Base2 'Reverse'
		{
			Implements TestPolymorphic.Base2.Name2 "REVERSE(Name2)";
		}
		Is TestPolymorphic.Base3
		{
			Implements TestPolymorphic.Base3.Name1 "Name1 + '-3'";
		}
	}
}

	// //=========================================================
	
	// SqlQueryable QueryableImplementation "SELECT a = 'SqlQueryable'"
	// {
		// ShortString a;
		// Is TestPolymorphic.Base1
		// {
			// Implements TestPolymorphic.Base1.Name1 "a";
		// }
		// Is TestPolymorphic.Base1 'Reverse'
		// {
			// Implements TestPolymorphic.Base1.Name1 "REVERSE(a)";
		// }
	// }
	
	// //=========================================================

// Module TestPolymorphic
// {
	// Polymorphic DifferentModuleBase
	// {
		// ShortString Name;
	// }
	
	// Entity DifferentModule
	// {
		// ShortString Code;
		// Is TestPolymorphic.DifferentModuleBase
		// {
			// Implements TestPolymorphic.DifferentModuleBase.Name "Code + '1'";
		// }
	// }
// }

// Module TestPolymorphic2
// {
	// Entity DifferentModule
	// {
		// ShortString Code;
		// Is TestPolymorphic.DifferentModuleBase
		// {
			// Implements TestPolymorphic.DifferentModuleBase.Name "Code + '2'";
		// }
	// }
// }

	// //=========================================================
	
	// Polymorphic Writable
	// {
		// ShortString Name;
		// Integer Days;
		
		// WriteToSubtype TestPolymorphic.StandardWritable;
			// // Will Implements all properties as-is, without any transformations.
			// // Write '(insert, update, delete) => _context.Repositories.TestPolymorphic.StandardWritable.Save(new ....)';
	// }
